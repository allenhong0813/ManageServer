@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ManageServer.Models.MachineList
@{
    ViewData["Title"] = "Home";
    var isAdmin = User.Claims.Where(u => u.Type == "IsAdmin").FirstOrDefault().Value;
}


<h2><b>伺服器管理</b></h2>

<!-- Content here -->

<form class="form-inline">
    <div class="form-group form-pairs">
        <label class="text-right">IP</label>
        <input id="inpIPName" type="text" class="form-control" placeholder="IP Name" style="margin-bottom: 5px;">
    </div>
    <div class="form-group  form-pairs">
        <label class="text-right">伺服器名稱</label>
        <input id="inpServerName" type="text" class="form-control" placeholder="Server Name" style="margin-bottom: 5px;">
    </div>
    <button type="button" class="btn btn-sm btn-primary" style="margin-bottom: 5px;" onclick="query()">查詢</button>

</form>

<div id="jsGrid" style="min-height:100%"></div>
@*dialog page*@
<div id="dialog-form" title="授權設定" style="display:none">
    <div id="pmjsGrid"></div>
</div>
<script>
    var userList =[];
    userList["insert"]= @Json.Serialize(ViewData["UserList"]);
    userList["edit"]= @Json.Serialize(ViewData["UserList"]);
    userList["temp"]= @Json.Serialize(ViewData["UserList"]);

    var machineUserData = null;
    var isAdmin= @isAdmin.ToLower();

    var origin = false;
    var originallyEditUserList;
    var onRowMachineKey;
    var onAction;
    //var currentMachineItem = null;

    $(document).ready(function () {
        initGrid();
        getGridData();
        initDetailGrid();
    });

    function initGrid(){
        $("#jsGrid").jsGrid({
            width: "100%",
            height: "400px",
            editing: isAdmin,
            selecting: true,
            inserting: isAdmin,
            paging: false,
            autoload: false,
            invalidMessage: "欄位輸入有誤：",
            deleteConfirm: "確定刪除這筆資料嗎？",
            rowClick: function () { return; },
            controller: {
                loadData: function (filter) {
                    return filter;
                },
                insertItem: function (insertingItem) {
                    var d = $.Deferred();
                    insertingItem.machineKey = generateUUID();;
                    $.ajax({
                        type: "POST",
                        url: "/Home/InsertMachineData",
                        data: { machineUserViewModel: insertingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve();
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
                updateItem: function (updatingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "PUT",
                        url: "/Home/UpdateMachineData",
                        data: { machineUserViewModel: updatingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve(updatingItem);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
                deleteItem: function (deletingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "DELETE",
                        url: "/Home/DeleteMachineData",
                        data: { machineUserViewModel: deletingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve();
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
            },
            fields: [
                {
                    name: "ip", type: "text", title: "*IP", width: 100,validTip: "[必填欄位]需要輸入IP位置。eg.127.0.0.1",
                    validate: [
                    { validator: "required", message: "[IP]欄位為必填" },
                    {
                        validator: function (value, item) {
                            return /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/.test(value);
                        },
                        message: "[IP]欄位：請輸入正確IP格式。eg.(172.0.0.1)"
                    }
                    ]
                },
                {
                    name: "name", type: "text", title: "*伺服器名稱", width: 80,validTip: "[必填欄位]需要輸入伺服器名稱。",
                    validate: [
                        { validator: "required", message: "[伺服器名稱]欄位為必填" }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "loginID", type: "text", title: "*登入者帳號", width: 80 ,validTip: "[必填欄位]需要輸入伺服器登入ID。",
                    validate: [
                        { validator: "required", message: "[登入者帳號]欄位為必填" },
                        {
                            validator: function (value, item) {
                                return /^[^\s]*$/g.test(value);
                            },
                            message: "[登入者帳號]欄位：不含空白字元與中文字"
                        }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "password", type: "text", title: "*密碼", width: 80,validTip: "[必填欄位]需要輸入伺服器密碼，不可輸入中文字。",
                    validate: [
                        { validator: "required", message: "[密碼]欄位為必填" },
                        {
                            validator: function (value, item) {
                                return /^[A-Za-z0-9_@@]+$/g.test(value);
                            },
                            message: "[密碼]欄位：不含空白字元，不可輸入中文字"
                        }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "os", type: "text", title: "*系統", width: 150,validTip: "[必填欄位]需要輸入伺服器系統版本。eg.127.0.0.1",
                    validate: [
                        { validator: "required", message: "[系統]欄位為必填" }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "hostIP", type: "text", title: "*本機IP", width: 100, validTip: "[必填欄位]需要輸入伺服器的本機IP。",
                    validate: [
                    { validator: "required", message: "[本機IP]欄位為必填" },
                    {
                        validator: function (value, item) {
                            return /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/.test(value);
                        },
                        message: "[本機IP]欄位：請輸入正確IP格式。eg.(172.0.0.1)"
                    }
                    ]
                },
        {
            name: "description", type: "text", title: "描述", width: 150,
            itemTemplate: function (value, item) {
                return (value == null) ? value : value.replace(/</g, "&lt;");
            },

        },
        {
            name: "assignUserKeys",title: "授權使用者", width: 80, visible:isAdmin,
            itemTemplate: function (userValue, machineItem) {
                return btnPermission('item',userValue, machineItem);
            },
            insertTemplate: function (userValue,machineItem) {
                return btnPermission('insert',userValue,machineItem);
            },
            editTemplate: function (userValue, machineItem) {
                return btnPermission('edit',userValue, machineItem);
            },
            insertValue :function(){
                var AssignUserKeys=[];
                
                $.each(userList["insert"],function(index,user){
                    if(user.isApply == true){
                        AssignUserKeys.push(user.userID);
                    }
                });
                return AssignUserKeys;
            },
            //editValue :function(){
            //    var AssignUserKeys=[];
            //    userList["edit"] = userList["temp"];
            //    $.each(userList["edit"],function(index,user){
            //        if(user.isApply == true){
            //            AssignUserKeys.push(user.userID);
            //        }
            //    });
            //    return AssignUserKeys;
            //}
            
        },
         {
             name: "control" ,type: "control" , visible:isAdmin,
             _createCancelEditButton: function() {
                 var $result = jsGrid.fields.control.prototype._createCancelEditButton.apply(this, arguments);
                 $result.on("click", function() {
                     origin = true;
                 });
                 return $result;
             }
         }
            ]
        });
    }

    function getGridData() {
        var d = $.Deferred();
        $.ajax({
            type: "GET",
            url: '/Home/GetGridData'
        }).done(function (data) {
            machineUserData = data;
            $("#jsGrid").jsGrid("loadData", machineUserData);
            d.resolve(data);
        }).fail(function (jqXHR, textStatus, errorThrown) {
            ErrorMessage(jqXHR);
            d.resolve(data);
        });
        return d.promise();
    }

    function initDetailGrid() {
        $("#pmjsGrid").jsGrid({
            width: "100%",
            height: "100%",
            filtering: false,
            editing: false,
            selecting: true,
            inserting: false,
            sorting: false,
            paging: false,
            autoload: false,
            invalidMessage: "勾選有誤：",
            controller: {
                loadData: function (filter) {
                    return filter;
                },
            },

            fields: [
                {
                    headerTemplate: function() {
                        return $("<input>全選</input>").attr("type", "checkbox").attr("id","inpCheckAll").attr("name","inpCheckAll")
                                .on("click", function () {
                                    checkedAllItem();
                                });
                    },
                    itemTemplate: function(userValue, userItem) {
                        return $("<input>").attr("type", "checkbox").attr("name","inpCheckItem")
                                .prop("checked", userItem.isApply)
                                .on("change", function () {
                                    var isChecked = $(this).is(":checked");
                                    checkedItem(isChecked,userItem);
                                    checkOrRemoveCheckAll();
                                });
                    },
                    align: "center",
                    width: 20
                },
                {
                    name: "userID", type: "text", title: "", width: 80,
                },
            ]
        })
    }

    var btnPermission = function(action,userValue, machineItem){
        var $btnPermissionSetting;
        if(action == "item"){
            $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', true).text("授權設定");
        }else if(action == "insert"){
            $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', false).text("授權設定");
        }else if(action == "edit"){
            $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', false).text("授權設定");
        }

        $btnPermissionSetting.on("click", function () {
            onAction = action;
            if(onAction=="edit"){
                onRowMachineKey = machineItem.machineKey;
            }
            dialogForm(action,userValue, machineItem, confirmFunction);
            getMachineUser(action,userValue,machineItem);
            $("#pmjsGrid").jsGrid("loadData",userList[action]);
            checkOrRemoveCheckAll();
        })

        return $btnPermissionSetting;
    }

    var getMachineUser = function(action,userValue,machineItem){
        if(action=="edit"){
            var assignUserKeys = machineItem.assignUserKeys;
            $.each(userList[action],function(index, user){
                if(assignUserKeys.indexOf(user.userID)>-1){
                    user.isApply=true;
                }else{
                    user.isApply=false;
                }
            });
        }

        //if(origin == false){
        //    originallyEditUserList = $.extend(true, [], userList);
        //}
    }

    //dialog confirm button
    var confirmFunction = function (action) {
        var assignUsers = [];
        $.each(userList[action], function (indexInArray, user) {
            if (user.isApply == true)
                assignUsers.push(user.userID);
        });
        //edit的Detail狀態記錄
        if(action=="edit"){
            $.each(machineUserData, function (indexInArray, machineUser) {
                if (machineUser.machineKey == onRowMachineKey) {
                    machineUser.assignUserKeys = assignUsers;
                }
            });
        }
        dialog.dialog("close");
    }

    var checkedAllItem = function() {
        if($("#inpCheckAll").prop("checked")) {
            $("input[name='inpCheckItem']").prop("checked", true);
            $.each(userList[onAction], function (index, user) {
                user.isApply = true;
            });
        }else{
            $("input[name='inpCheckItem']").prop("checked", false);
            $.each(userList[onAction], function (index, user) {
                user.isApply = false;
            });
        }

    };

    var checkedItem = function(isChecked,userItem){
        userItem.isApply = isChecked;
    }

    //btn_query
    function query() {
        var ipName = "";
        var serverName = "";
        if ($("#inpIPName").val() != null && $("#inpIPName").val() != "")
            ipName = $("#inpIPName").val();

        if ($("#inpServerName").val() != null && $("#inpServerName").val() != "")
            serverName = $("#inpServerName").val();
        $.ajax({
            type: "GET",
            url: "/Home/GetServerInfo",
            data: {
                ipName: ipName,
                serverName: serverName
            }
        }).done(function (data) {
            machineUserData = data;
            $("#jsGrid").jsGrid("loadData", machineUserData);
        }).fail(function (jqXHR, textStatus, errorThrown) {
            if (jqXHR.responseText == "GetServerInfo Error.") {
                alert(alert("Query error：取得資料發生錯誤。"));
            }
            else if (jqXHR.responseText == "DBNoConnect") {
                alert("Query error：未連接上資料庫。")
            }
            else {
                alert("發生錯誤。");
                console.error(jqXHR.responseText);
            }
        });
    }
</script>