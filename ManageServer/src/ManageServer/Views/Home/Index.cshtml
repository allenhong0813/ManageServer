@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ManageServer.Models.MachineList
@{
    ViewData["Title"] = "Home";
    var isAdmin = User.Claims.Where(u => u.Type == "IsAdmin").FirstOrDefault().Value;
}


<h2><b>伺服器管理</b></h2>

<!-- Content here -->

<form class="form-inline">
    <div class="form-group form-pairs">
        <label class="text-right">IP</label>
        <input id="inpIPName" type="text" class="form-control" placeholder="IP Name" style="margin-bottom: 5px;">
    </div>
    <div class="form-group  form-pairs">
        <label class="text-right">伺服器名稱</label>
        <input id="inpServerName" type="text" class="form-control" placeholder="Server Name" style="margin-bottom: 5px;">
    </div>
    <button type="button" class="btn btn-sm btn-primary" style="margin-bottom: 5px;" onclick="query()">查詢</button>

</form>

<div id="jsGrid" style="min-height:100%"></div>
@*dialog page*@
<div id="dialog-form" title="授權設定" style="display:none">
    <div id="pmjsGrid"></div>
</div>
<script>
    var editUserList = @Json.Serialize(ViewData["UserList"]);
    var insertUserList = @Json.Serialize(ViewData["UserList"]);
    var machineUserData = null;
    var isAdmin= @isAdmin.ToLower();
    var origin = false;
    var originallyEditUserList;
    var $btnPermissionSetting;
    var action="";
    //var currentMachineItem = null;

    $(document).ready(function () {
        initGrid();
        getGridData();
        //initDetailGrid();
    });

    function initGrid(){
        $("#jsGrid").jsGrid({
            width: "100%",
            height: "400px",
            editing: isAdmin,
            selecting: true,
            inserting: isAdmin,
            paging: false,
            autoload: false,
            invalidMessage: "欄位輸入有誤：",
            deleteConfirm: "確定刪除這筆資料嗎？",
            rowClick: function () { return; },
            controller: {
                loadData: function (filter) {
                    return filter;
                },
                insertItem: function (insertingItem) {
                    var d = $.Deferred();
                    insertingItem.machineKey = generateUUID();
                    $.ajax({
                        type: "POST",
                        url: "/Home/InsertMachineData",
                        data: { machineUserViewModel: insertingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve();
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
                updateItem: function (updatingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "PUT",
                        url: "/Home/UpdateMachineData",
                        data: { machineUserViewModel: updatingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve(updatingItem);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
                deleteItem: function (deletingItem) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "DELETE",
                        url: "/Home/DeleteMachineData",
                        data: { machineUserViewModel: deletingItem }
                    }).done(function (result) {
                        if (result == "success")
                            d.resolve();
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        errorMessage(jqXHR);
                        d.resolve();
                    });
                    return d.promise();
                },
            },
            fields: [
                {
                    name: "ip", type: "text", title: "*IP", width: 100,validTip: "[必填欄位]需要輸入IP位置。eg.127.0.0.1",
                    validate: [
                    { validator: "required", message: "[IP]欄位為必填" },
                    {
                        validator: function (value, item) {
                            return /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/.test(value);
                        },
                        message: "[IP]欄位：請輸入正確IP格式。eg.(172.0.0.1)"
                    }
                    ]
                },
                {
                    name: "name", type: "text", title: "*伺服器名稱", width: 80,validTip: "[必填欄位]需要輸入伺服器名稱。",
                    validate: [
                        { validator: "required", message: "[伺服器名稱]欄位為必填" }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "loginID", type: "text", title: "*登入者帳號", width: 80 ,validTip: "[必填欄位]需要輸入伺服器登入ID。",
                    validate: [
                        { validator: "required", message: "[登入者帳號]欄位為必填" },
                        {
                            validator: function (value, item) {
                                return /^[^\s]*$/g.test(value);
                            },
                            message: "[登入者帳號]欄位：不含空白字元與中文字"
                        }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "password", type: "text", title: "*密碼", width: 80,validTip: "[必填欄位]需要輸入伺服器密碼，不可輸入中文字。",
                    validate: [
                        { validator: "required", message: "[密碼]欄位為必填" },
                        {
                            validator: function (value, item) {
                                return /^[u4E00-u9FA5]+[^\s]$/g.test(value);
                            },
                            message: "[密碼]欄位：不含空白字元"
                        }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "os", type: "text", title: "*系統", width: 150,validTip: "[必填欄位]需要輸入伺服器系統版本。eg.127.0.0.1",
                    validate: [
                        { validator: "required", message: "[系統]欄位為必填" }
                    ],
                    itemTemplate: function (value, item) {
                        return value.replace(/</g, "&lt;");
                    },
                },
                {
                    name: "hostIP", type: "text", title: "*本機IP", width: 100, validTip: "[必填欄位]需要輸入伺服器的本機IP。",
                    validate: [
                    { validator: "required", message: "[本機IP]欄位為必填" },
                    {
                        validator: function (value, item) {
                            return /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/.test(value);
                        },
                        message: "[本機IP]欄位：請輸入正確IP格式。eg.(172.0.0.1)"
                    }
                    ]
                },
        {
            name: "description", type: "text", title: "描述", width: 150,
            itemTemplate: function (value, item) {
                return (value == null) ? value : value.replace(/</g, "&lt;");
            },

        },
        {
            name: "assignUserKeys",title: "授權使用者", width: 80, visible:isAdmin,
            itemTemplate: function (userValue, machineItem) {
                return btnDisabledPermission(userValue, machineItem);
            },

            editTemplate: function (userValue, machineItem) {
                return btnEditPermission(userValue, machineItem);
            },
            insertTemplate: function (userValue,machineItem) {
                return btnInsertPermission(userValue,machineItem);
            },
            insertValue :function(){
                var insertAssignUserKeys=[];
                $.each(insertUserList,function(index,userKey){
                    if(userKey.isApply == true){
                        insertAssignUserKeys.push(userKey.userID);
                    }
                });
                return insertAssignUserKeys;
            }
        },
         {
             name: "control" ,type: "control" , visible:isAdmin,
             _createCancelEditButton: function() {
                 var $result = jsGrid.fields.control.prototype._createCancelEditButton.apply(this, arguments);
                 $result.on("click", function() {
                     origin = true;
                 });
                 return $result;
             }
         }
            ]
        });
    }

    function getGridData() {
        var d = $.Deferred();
        $.ajax({
            type: "GET",
            url: '/Home/GetGridData'
        }).done(function (data) {
            machineUserData = data;
            $("#jsGrid").jsGrid("loadData", machineUserData);
            d.resolve(data);
        }).fail(function (jqXHR, textStatus, errorThrown) {
            ErrorMessage(jqXHR);
            d.resolve(data);
        });
        return d.promise();
    }

    var btnDisabledPermission = function (userValue, machineItem) {
        $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', true).text("授權設定");
        return $btnPermissionSetting;
    };

    var btnInsertPermission = function(userValue,machineItem){
        $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', false).text("授權設定");
        $btnPermissionSetting.on("click", function () {
            action ="insertAction"
            dialogForm(action,userValue, machineItem, confirmFunction);
            setMachinePermission(action, userValue, machineItem);
            checkOrRemoveCheckAll();
        })
        return $btnPermissionSetting;
    }

    var btnEditPermission = function (userValue, machineItem) {
        $btnPermissionSetting = $("<button class='btn btn-default btnPermission'>").prop('disabled', false).text("授權設定");
        $btnPermissionSetting.on("click", function () {
            action ="editAction"
            dialogForm(action,userValue, machineItem, confirmFunction);
            getMachineUser(userValue,machineItem);
            setMachinePermission(action, userValue, machineItem);
            checkOrRemoveCheckAll();

        })
        return $btnPermissionSetting;
    };

    var getMachineUser = function(userValue,machineItem){
        var assignUserKeys = machineItem.assignUserKeys;

        $.each(editUserList,function(index, user){
            if(assignUserKeys.indexOf(user.userID)>-1){
                user.isApply=true;
            }else{
                user.isApply=false;
            }
        });
        if(origin == false){
            originallyEditUserList = $.extend(true, [], editUserList);
        }


    }

    //function initDetailGrid() {
    //    $("#pmjsGrid").jsGrid({
    //        width: "100%",
    //        height: "100%",
    //        filtering: false,
    //        editing: false,
    //        selecting: true,
    //        inserting: false,
    //        sorting: false,
    //        paging: false,
    //        autoload: false,
    //        invalidMessage: "勾選有誤：",
    //        controller: {
    //            loadData: function (filter) {
    //                return filter;
    //            },
    //        },
    //        fields: [
    //            {
    //                headerTemplate: function() {
    //                    return $("<input>全選</input>").attr("type", "checkbox").attr("id","inpCheckAll").attr("name","inpCheckAll")
    //                            .on("click", function () {
    //                                checkedAllItem(action ,currentMachineItem, userList);
    //                            });
    //                },
    //                itemTemplate: function(userValue, userItem) {
    //                    return $("<input>").attr("type", "checkbox").attr("name","inpCheckItem")
    //                            .prop("checked", userItem.isApply)
    //                            .on("change", function () {
    //                                $(this).is(":checked") ? checkedSingleItem(action, currentMachineItem, userItem, userList):uncheckedSingleItem(action, machineItem, userItem, userList);
    //                                checkOrRemoveCheckAll();
    //                            });
    //                },
    //                align: "center",
    //                width: 20
    //            },
    //            {
    //                name: "userID", type: "text", title: "", width: 80,
    //            },
    //        ]
    //    })
    //}

    var setMachinePermission = function(action,userValue,machineItem){
        var userList ;
        if(origin == true){
            editUserList = originallyEditUserList;
        }
        if(action == "insertAction"){
            userList = insertUserList;
        }else if(action =="editAction"){
            userList = editUserList;
        }
        //currentMachineItem = machineItem;
        //$("#pmjsGrid").jsGrid("loadData",userList);

        $("#pmjsGrid").jsGrid({
            width: "100%",
            height: "100%",
            filtering: false,
            editing: false,
            selecting: true,
            inserting: false,
            sorting: false,
            paging: false,
            autoload: false,
            data: userList,
            invalidMessage: "勾選有誤：",
            controller: {
                loadData: function (filter) {
                    return filter;
                },
            },

            fields: [
                {
                    headerTemplate: function() {
                        return $("<input>全選</input>").attr("type", "checkbox").attr("id","inpCheckAll").attr("name","inpCheckAll")
                                .on("click", function () {
                                    checkedAllItem(action ,machineItem, userList);
                                });
                    },
                    itemTemplate: function(userValue, userItem) {
                        return $("<input>").attr("type", "checkbox").attr("name","inpCheckItem")
                                .prop("checked", userItem.isApply)
                                .on("change", function () {
                                    $(this).is(":checked") ? checkedSingleItem(action, machineItem, userItem, userList):uncheckedSingleItem(action, machineItem, userItem, userList);
                                    checkOrRemoveCheckAll();
                                });
                    },
                    align: "center",
                    width: 20
                },
                {
                    name: "userID", type: "text", title: "", width: 80,
                },
            ]
        })
    }

    //dialog confirm button
    var confirmFunction = function (action) {

        if(action == "insertAction"){
            var insertMachineUser = {assignUserKeys:[]};

            $.each(insertUserList, function (indexInArray, user) {
                insertMachineUser.assignUserKeys.push(user.userID);
            });
            $("#pmjsGrid").jsGrid("loadData", insertUserList);
        }else if(action == "editAction"){

            var currentMachineUser = $.grep(machineUserData, function (element, index) {
                return element.machineKey == onRowMachineKey;
            });
            currentMachineUser[0].assignUserKeys = [];

            $.each(editUserList, function (indexInArray, user) {
                if (user.isApply == true)
                    currentMachineUser[0].assignUserKeys.push(user.userID);
            });

            $.each(machineUserData, function (indexInArray, machineUser) {
                if (machineUser.machineKey == currentMachineUser[0].machineKey) {
                    machineUser.assignUserKeys = currentMachineUser[0].assignUserKeys;
                }
            });
            $("#pmjsGrid").jsGrid("loadData", editUserList);
        }

        dialog.dialog("close");

    }

    var onRowMachineKey;
    var checkedAllItem = function(action,machineItem,userList) {
        if(action =="insertAction"){
            if($("#inpCheckAll").prop("checked")) {
                $("input[name='inpCheckItem']").prop("checked", true);
                $.each(insertUserList, function (index, user) {
                    user.isApply = true;
                });
            }else{
                $("input[name='inpCheckItem']").prop("checked", false);
                $.each(insertUserList, function (index, user) {
                    user.isApply = false;
                });
            }
        }else  if(action =="editAction"){
            if($("#inpCheckAll").prop("checked")) {
                $("input[name='inpCheckItem']").prop("checked", true);
                $.each(editUserList, function (index, user) {
                    user.isApply = true;
                });
            }else{
                $("input[name='inpCheckItem']").prop("checked", false);
                $.each(editUserList, function (index, user) {
                    user.isApply = false;
                });
            }
            onRowMachineKey = machineItem.machineKey;
        }
    };

    var checkedSingleItem = function(action,machineItem,userItem,userList) {
        userItem.isApply = true;
        if(action == "editAction"){
            onRowMachineKey = machineItem.machineKey;
        }
    };

    var uncheckedSingleItem = function(action,machineItem,userItem,userList) {
        userItem.isApply = false;
        if(action == "editAction"){
            onRowMachineKey = machineItem.machineKey;
        }
    };

    //btn_query
    function query() {
        var ipName = "";
        var serverName = "";
        if ($("#inpIPName").val() != null && $("#inpIPName").val() != "")
            ipName = $("#inpIPName").val();

        if ($("#inpServerName").val() != null && $("#inpServerName").val() != "")
            serverName = $("#inpServerName").val();
        $.ajax({
            type: "GET",
            url: "/Home/GetServerInfo",
            data: {
                ipName: ipName,
                serverName: serverName
            }
        }).done(function (data) {
            machineUserData = data;
            $("#jsGrid").jsGrid("loadData", machineUserData);
        }).fail(function (jqXHR, textStatus, errorThrown) {
            if (jqXHR.responseText == "GetServerInfo Error.") {
                alert(alert("Query error：取得資料發生錯誤。"));
            }
            else if (jqXHR.responseText == "DBNoConnect") {
                alert("Query error：未連接上資料庫。")
            }
            else {
                alert("發生錯誤。");
                console.error(jqXHR.responseText);
            }
        });
    }
</script>